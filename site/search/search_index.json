{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A tutorial website for software documentation tools. \u00b6 Documentation Website Generators School vector created by freepik - www.freepik.com","title":"Home"},{"location":"#a-tutorial-website-for-software-documentation-tools","text":"Documentation Website Generators School vector created by freepik - www.freepik.com","title":"A tutorial website for software documentation tools."},{"location":"Static%20site%20generators/Hugo/Github/","text":"Introduction \u00b6 In this guide you will learn how to deploy a Hugo website to GitHub, and publish the website for free with GitHub pages. GitHub pages is a free hosting service offered by GitHub that allows you to publish your webiste projects for free directly from your GitHub repositories. GitHub pages is available in all public GitHub repositories and GitHub free for organizations. Prerequisites \u00b6 This guide assumes that you have: A ready to deploy Hugo website - you can check out our Hugo quickstart tutorial for details on how to set up a documentation website with Jekyll. git installed locally and GitHub account - visit product.hubspot.com for instructions on how to setup git and GitHub. Deploying your website to GitHub \u00b6 Follow these instructions to deploy your Hugo website to GitHub. Create a GitHub repository for your website - git@github.com:Quadrisheriff/hugo-project.git. Initialize your website directory with git . git init Add your repository as the remote origin. git remote add origin git@github.com:Quadrisheriff/hugo-project.git Verify your remote origin. $ git remote -v origin git@github.com:Quadrisheriff/hugo-project.git (fetch) origin git@github.com:Quadrisheriff/hugo-project.git (push) Add your new changes to git . git add . Commit your changes. git commit -m 'hugo-project' Push your directory to GitHub. git push --set-upstream origin master Hosting your website on GitHub pages \u00b6 Create a GitHub pages repository - <YOUR-USERNAME> .github.io. Navigate back to your website's directory. cd <hugo-project-directory-name> Link your GitHub pages repository to your original repository. git submodule add -b master https://github.com/<YOUR-USERNAME>/<YOUR-USERNAME>.github.io.git public Update your config.toml file to specify your baseURL . # Config.toml baseURL = \"<yourusername>.github.io\" Create a deploy.sh file in your root directory. touch deploy.sh Add the following script into the deploy.sh file to automate your deployment. #!/bin/sh # If a command fails then the deploy stops set -e printf \"\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\" # Build the project. hugo # if using a theme, replace with `hugo -t <YOURTHEME>` # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\"rebuilding site $(date)\" if [ -n \"$*\" ]; then msg=\"$*\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master Deploy your website to GitHub pages. ./deploy.sh \"commit message\" After deploying your website, your website will be published and hosted at .github.io.","title":"Publishing your Hugo website with GitHub pages."},{"location":"Static%20site%20generators/Hugo/Github/#introduction","text":"In this guide you will learn how to deploy a Hugo website to GitHub, and publish the website for free with GitHub pages. GitHub pages is a free hosting service offered by GitHub that allows you to publish your webiste projects for free directly from your GitHub repositories. GitHub pages is available in all public GitHub repositories and GitHub free for organizations.","title":"Introduction"},{"location":"Static%20site%20generators/Hugo/Github/#prerequisites","text":"This guide assumes that you have: A ready to deploy Hugo website - you can check out our Hugo quickstart tutorial for details on how to set up a documentation website with Jekyll. git installed locally and GitHub account - visit product.hubspot.com for instructions on how to setup git and GitHub.","title":"Prerequisites"},{"location":"Static%20site%20generators/Hugo/Github/#deploying-your-website-to-github","text":"Follow these instructions to deploy your Hugo website to GitHub. Create a GitHub repository for your website - git@github.com:Quadrisheriff/hugo-project.git. Initialize your website directory with git . git init Add your repository as the remote origin. git remote add origin git@github.com:Quadrisheriff/hugo-project.git Verify your remote origin. $ git remote -v origin git@github.com:Quadrisheriff/hugo-project.git (fetch) origin git@github.com:Quadrisheriff/hugo-project.git (push) Add your new changes to git . git add . Commit your changes. git commit -m 'hugo-project' Push your directory to GitHub. git push --set-upstream origin master","title":"Deploying your website to GitHub"},{"location":"Static%20site%20generators/Hugo/Github/#hosting-your-website-on-github-pages","text":"Create a GitHub pages repository - <YOUR-USERNAME> .github.io. Navigate back to your website's directory. cd <hugo-project-directory-name> Link your GitHub pages repository to your original repository. git submodule add -b master https://github.com/<YOUR-USERNAME>/<YOUR-USERNAME>.github.io.git public Update your config.toml file to specify your baseURL . # Config.toml baseURL = \"<yourusername>.github.io\" Create a deploy.sh file in your root directory. touch deploy.sh Add the following script into the deploy.sh file to automate your deployment. #!/bin/sh # If a command fails then the deploy stops set -e printf \"\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\" # Build the project. hugo # if using a theme, replace with `hugo -t <YOURTHEME>` # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\"rebuilding site $(date)\" if [ -n \"$*\" ]; then msg=\"$*\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master Deploy your website to GitHub pages. ./deploy.sh \"commit message\" After deploying your website, your website will be published and hosted at .github.io.","title":"Hosting your website on GitHub pages"},{"location":"Static%20site%20generators/Hugo/Hugo-quickstart/","text":"Introduction \u00b6 Hugo is a speed optimized static site generating tool written in GO. Hugo can be used to create documentation websites, blogs, portfolio websites, etc. from markdown and HTML. In this guide, you will build a documentation website with Hugo-extended and the Docsy theme . Prerequisites \u00b6 This guide assumes that you have: GO installed locally - visit ednsquare.com for instructions on how to install Go on your local machine. Homebrew(MacOS and LINUX) - visit brew.sh for instructions on how to install homebrew on mac and linux. Chocolatey(windows) - visit chocolatey.org for instructions on how to install chocolatey on windows. Installing Hugo-extended \u00b6 Windows installation Install hugo-extended with Chocolatey on windows. choco install hugo-extended -confirm Verify your installation. $ hugo version Hugo Static Site Generator v0.64.1/extended windows/amd64 BuildDate: unknown MacOS installation Install hugo-extended with homebrew on MacOS. brew install hugo Verify your installation. $ hugo version Hugo Static Site Generator v0.64.1/extended darwin/amd64 BuildDate: unknown Linux installation Install hugo-extended with homebrew on linux. brew install hugo Verify your installation. $ hugo version Hugo Static Site Generator v0.64.1/extended darwin/amd64 BuildDate: unknown Creating your website \u00b6 Create your new Hugo project with the hugo new site command. $ hugo new site hugo-project Congratulations! Your new Hugo site is created in /Users/sheriff/hugo-project. Just a few more steps and you ' re ready to go: 1 . Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \"hugo new theme <THEMENAME>\" command. 2 . Perhaps you want to add some content. You can add single files with \"hugo new <SECTIONNAME>/<FILENAME>.<FORMAT>\" . 3 . Start the built-in live server via \"hugo server\" . Visit https://gohugo.io/ for quickstart guide and full documentation. The hugo new command will also create a directory with the following file structure: hugo-project/ \u251c\u2500\u2500 archetypes \u251c\u2500\u2500 config.toml \u251c\u2500\u2500 content \u251c\u2500\u2500 data \u251c\u2500\u2500 layouts \u251c\u2500\u2500 static \u2514\u2500\u2500 themes This files are: archetypes : Directory for storing content template files. config.toml : Hugo configuration file. content : Directory for content files. data : Directory for storing configuration files. layouts : Directory for storing .html template files. static : Directory for storing all static contents. themes : Directory for storing your theme. Configuring your website \u00b6 All of your website's configuration details are defined in your config.toml file. Add the following bare minimum configuration into your config.toml file to specify your website's details. baseURL = \"http://quadrisheriff.org/\" languageCode = \"en-us\" title = \"Hugo Project\" theme = \"docsy\" Visit Hugo Website for more configuration options. Adding a theme to your website \u00b6 The Docsy theme is a Hugo theme that is built specifically for creating medium to large technical documentation websites. The Docsy theme comes preloaded with basic documentation features like the search bar, the menu, etc. To install the Docsy theme: cd to your project's directory. cd hugo-project Install postCSS and autoprefixer . sudo npm install -D --save autoprefixer sudo npm install -D --save postcss-cli Install the Docsy theme by adding it as a git submodule into your project. git init git submodule add https://github.com/google/docsy.git themes/docsy echo 'theme = \"docsy\"' >> config.toml git submodule update --init --recursive Adding contents to your website \u00b6 All your website's content files are stored in the content directory found in your root folder. The website's pages will be rendered with the same content structure as the organized content folder, the top level nested subfolders in the content directory will also determine the layout and sections for your website. Docsy ships with templates for three type of files in the content directory: Documentation files are stored in the docs directory. Blog contents are stored in the blog directory. Community oriented contents are stored in the community directory. content |- docs |- blog |- community To add a documentation page to your website: Create your documentation markdown or HTML file inside the docs directory. touch index.md Add the following yaml frontmatter to configure the page's information. --- title: \"A new documentation page\" weight: 1 type: docs description: > A new documentation page for our Hugo website. --- Add markup contents into your page. # Hugo project website This is our new documentation page. To add a custom section into your webite, creating the custom subdirectory inside the content folder, then specify the page's template in the frontmatter of the page. Visit the Docsy website for more information about adding contents into your website. Starting Hugo web server \u00b6 Hugo ships with a web server that has Live reload built in. This allows you to preview your changes realtime when your web server is running. Start your web server with the hugo server command. The web server will be hosted at http://localhost:1313 . The web server will automatically reload when you make any changes in your website's files. Building your website \u00b6 Build your website with the hugo command. The command will generate all your website's static files and store them in the ./public/ directory. You can deploy your website on different hosting platforms with the generated static files.","title":"Hugo Quickstart."},{"location":"Static%20site%20generators/Hugo/Hugo-quickstart/#introduction","text":"Hugo is a speed optimized static site generating tool written in GO. Hugo can be used to create documentation websites, blogs, portfolio websites, etc. from markdown and HTML. In this guide, you will build a documentation website with Hugo-extended and the Docsy theme .","title":"Introduction"},{"location":"Static%20site%20generators/Hugo/Hugo-quickstart/#prerequisites","text":"This guide assumes that you have: GO installed locally - visit ednsquare.com for instructions on how to install Go on your local machine. Homebrew(MacOS and LINUX) - visit brew.sh for instructions on how to install homebrew on mac and linux. Chocolatey(windows) - visit chocolatey.org for instructions on how to install chocolatey on windows.","title":"Prerequisites"},{"location":"Static%20site%20generators/Hugo/Hugo-quickstart/#installing-hugo-extended","text":"Windows installation Install hugo-extended with Chocolatey on windows. choco install hugo-extended -confirm Verify your installation. $ hugo version Hugo Static Site Generator v0.64.1/extended windows/amd64 BuildDate: unknown MacOS installation Install hugo-extended with homebrew on MacOS. brew install hugo Verify your installation. $ hugo version Hugo Static Site Generator v0.64.1/extended darwin/amd64 BuildDate: unknown Linux installation Install hugo-extended with homebrew on linux. brew install hugo Verify your installation. $ hugo version Hugo Static Site Generator v0.64.1/extended darwin/amd64 BuildDate: unknown","title":"Installing Hugo-extended"},{"location":"Static%20site%20generators/Hugo/Hugo-quickstart/#creating-your-website","text":"Create your new Hugo project with the hugo new site command. $ hugo new site hugo-project Congratulations! Your new Hugo site is created in /Users/sheriff/hugo-project. Just a few more steps and you ' re ready to go: 1 . Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \"hugo new theme <THEMENAME>\" command. 2 . Perhaps you want to add some content. You can add single files with \"hugo new <SECTIONNAME>/<FILENAME>.<FORMAT>\" . 3 . Start the built-in live server via \"hugo server\" . Visit https://gohugo.io/ for quickstart guide and full documentation. The hugo new command will also create a directory with the following file structure: hugo-project/ \u251c\u2500\u2500 archetypes \u251c\u2500\u2500 config.toml \u251c\u2500\u2500 content \u251c\u2500\u2500 data \u251c\u2500\u2500 layouts \u251c\u2500\u2500 static \u2514\u2500\u2500 themes This files are: archetypes : Directory for storing content template files. config.toml : Hugo configuration file. content : Directory for content files. data : Directory for storing configuration files. layouts : Directory for storing .html template files. static : Directory for storing all static contents. themes : Directory for storing your theme.","title":"Creating your website"},{"location":"Static%20site%20generators/Hugo/Hugo-quickstart/#configuring-your-website","text":"All of your website's configuration details are defined in your config.toml file. Add the following bare minimum configuration into your config.toml file to specify your website's details. baseURL = \"http://quadrisheriff.org/\" languageCode = \"en-us\" title = \"Hugo Project\" theme = \"docsy\" Visit Hugo Website for more configuration options.","title":"Configuring your website"},{"location":"Static%20site%20generators/Hugo/Hugo-quickstart/#adding-a-theme-to-your-website","text":"The Docsy theme is a Hugo theme that is built specifically for creating medium to large technical documentation websites. The Docsy theme comes preloaded with basic documentation features like the search bar, the menu, etc. To install the Docsy theme: cd to your project's directory. cd hugo-project Install postCSS and autoprefixer . sudo npm install -D --save autoprefixer sudo npm install -D --save postcss-cli Install the Docsy theme by adding it as a git submodule into your project. git init git submodule add https://github.com/google/docsy.git themes/docsy echo 'theme = \"docsy\"' >> config.toml git submodule update --init --recursive","title":"Adding a theme to your website"},{"location":"Static%20site%20generators/Hugo/Hugo-quickstart/#adding-contents-to-your-website","text":"All your website's content files are stored in the content directory found in your root folder. The website's pages will be rendered with the same content structure as the organized content folder, the top level nested subfolders in the content directory will also determine the layout and sections for your website. Docsy ships with templates for three type of files in the content directory: Documentation files are stored in the docs directory. Blog contents are stored in the blog directory. Community oriented contents are stored in the community directory. content |- docs |- blog |- community To add a documentation page to your website: Create your documentation markdown or HTML file inside the docs directory. touch index.md Add the following yaml frontmatter to configure the page's information. --- title: \"A new documentation page\" weight: 1 type: docs description: > A new documentation page for our Hugo website. --- Add markup contents into your page. # Hugo project website This is our new documentation page. To add a custom section into your webite, creating the custom subdirectory inside the content folder, then specify the page's template in the frontmatter of the page. Visit the Docsy website for more information about adding contents into your website.","title":"Adding contents to your website"},{"location":"Static%20site%20generators/Hugo/Hugo-quickstart/#starting-hugo-web-server","text":"Hugo ships with a web server that has Live reload built in. This allows you to preview your changes realtime when your web server is running. Start your web server with the hugo server command. The web server will be hosted at http://localhost:1313 . The web server will automatically reload when you make any changes in your website's files.","title":"Starting Hugo web server"},{"location":"Static%20site%20generators/Hugo/Hugo-quickstart/#building-your-website","text":"Build your website with the hugo command. The command will generate all your website's static files and store them in the ./public/ directory. You can deploy your website on different hosting platforms with the generated static files.","title":"Building your website"},{"location":"Static%20site%20generators/Hugo/netlify/","text":"Work in progress \u00b6 This tutorial explains how to deploy your Hugo websites on Netlify. Netlify is a cloud computing platform that allows you to deploy all your web projects for free. Netlify offers some cool features like CDN, continous integration, admin GUI that enables you to better manage your web projects. This guide include steps about adding Netlify configuration files, deploying your website's repository to GitHub, and finally deploying your website to Nelitfy directly from GitHub. Prerequisites \u00b6 This guide assumes that you have: A ready to deploy Hugo website - you can check out our Hugo quickstart tutorial for details on how to set up a documentation website with Jekyll. git installed locally and GitHub account - visit product.hubspot.com for instructions on how to setup git and GitHub. Netlify account - visit nelify.com to set up your free Netlfiy account. Adding Netlify configuration files \u00b6 Create a netlify.toml file in your website's root directory. touch netlify.toml Add the following configuration into the netlify.toml file. [build] publish = \"public\" command = \"hugo --gc --minify\" [context.production.environment] HUGO_VERSION = \"0.74.3\" HUGO_ENV = \"production\" HUGO_ENABLEGITINFO = \"true\" Deploying your project to GitHub \u00b6 To deploy your website on netlify, you have to deploy your project into a git repository manager(GitHub, GitLab or Bitbucket), and then deploy directly to Netlify from the git repository manager. Follow these instructions to deploy your Hugo website to GitHub. Create a GitHub repository for your website - git@github.com:Quadrisheriff/hugo-project.git. Initialize your website directory with git . git init Add your repository as the remote origin. git remote add origin git@github.com:Quadrisheriff/hugo-project.git Verify your remote origin. $ git remote -v origin git@github.com:Quadrisheriff/hugo-project.git (fetch) origin git@github.com:Quadrisheriff/hugo-project.git (push) Add your new changes to git . git add . Commit your changes. git commit -m 'hugo-project' Push your directory to GitHub. git push --set-upstream origin master Deploying your website on Netlify from GitHub \u00b6 To deploy your website to Netlify from your GitHub repository: From your Netlify dashboard, select New site from Git . Click GitHub . Walk through the processes involved in linking your GitHub account with Netlify. Select your website's repository from all the listed repositories. Click Deploy site to deploy your webste on netlify Once deployed, your website's details and a preview link will be added to your Netlify dashboard.","title":"Deploying your Hugo website on Netlify."},{"location":"Static%20site%20generators/Hugo/netlify/#work-in-progress","text":"This tutorial explains how to deploy your Hugo websites on Netlify. Netlify is a cloud computing platform that allows you to deploy all your web projects for free. Netlify offers some cool features like CDN, continous integration, admin GUI that enables you to better manage your web projects. This guide include steps about adding Netlify configuration files, deploying your website's repository to GitHub, and finally deploying your website to Nelitfy directly from GitHub.","title":"Work in progress"},{"location":"Static%20site%20generators/Hugo/netlify/#prerequisites","text":"This guide assumes that you have: A ready to deploy Hugo website - you can check out our Hugo quickstart tutorial for details on how to set up a documentation website with Jekyll. git installed locally and GitHub account - visit product.hubspot.com for instructions on how to setup git and GitHub. Netlify account - visit nelify.com to set up your free Netlfiy account.","title":"Prerequisites"},{"location":"Static%20site%20generators/Hugo/netlify/#adding-netlify-configuration-files","text":"Create a netlify.toml file in your website's root directory. touch netlify.toml Add the following configuration into the netlify.toml file. [build] publish = \"public\" command = \"hugo --gc --minify\" [context.production.environment] HUGO_VERSION = \"0.74.3\" HUGO_ENV = \"production\" HUGO_ENABLEGITINFO = \"true\"","title":"Adding Netlify configuration files"},{"location":"Static%20site%20generators/Hugo/netlify/#deploying-your-project-to-github","text":"To deploy your website on netlify, you have to deploy your project into a git repository manager(GitHub, GitLab or Bitbucket), and then deploy directly to Netlify from the git repository manager. Follow these instructions to deploy your Hugo website to GitHub. Create a GitHub repository for your website - git@github.com:Quadrisheriff/hugo-project.git. Initialize your website directory with git . git init Add your repository as the remote origin. git remote add origin git@github.com:Quadrisheriff/hugo-project.git Verify your remote origin. $ git remote -v origin git@github.com:Quadrisheriff/hugo-project.git (fetch) origin git@github.com:Quadrisheriff/hugo-project.git (push) Add your new changes to git . git add . Commit your changes. git commit -m 'hugo-project' Push your directory to GitHub. git push --set-upstream origin master","title":"Deploying your project to GitHub"},{"location":"Static%20site%20generators/Hugo/netlify/#deploying-your-website-on-netlify-from-github","text":"To deploy your website to Netlify from your GitHub repository: From your Netlify dashboard, select New site from Git . Click GitHub . Walk through the processes involved in linking your GitHub account with Netlify. Select your website's repository from all the listed repositories. Click Deploy site to deploy your webste on netlify Once deployed, your website's details and a preview link will be added to your Netlify dashboard.","title":"Deploying your website on Netlify from GitHub"},{"location":"Static%20site%20generators/Jekyll/Github/","text":"Introduction \u00b6 You will learn how to deploy and host a Jekyll website with GitHub pages in this guide. GitHub pages is a free hosting service offered by GitHub that allows you to publish your website projects for free directly from your GitHub repositories. GitHub pages is powered with the Jekyll engine, hence publishing Jekyll websites with GitHub pages is a much more simplified process compared to other static site generators. Prerequisites \u00b6 This guide assumes that you have: A ready to deploy Jekyll website - you can check out our Jekyll quickstart tutorial for details on how to set up a documentation website with Jekyll. git installed locally and GitHub account - visit product.hubspot.com for instructions on how to setup git and GitHub. Deploying your project to GitHub \u00b6 Follow these instructions to deploy your Jekyll project to GitHub. Create a GitHub repository for your project - git@github.com:Quadrisheriff/jekyll-project.git. Initialize your project directory with git . git init Add your repository as the remote origin. git remote add origin git@github.com:Quadrisheriff/jekyll-project.git Verify your remote origin. $ git remote -v origin git@github.com:Quadrisheriff/jekyll-project.git (fetch) origin git@github.com:Quadrisheriff/jekyll-project.git (push) Add your new changes to git . git add . Commit your changes. git commit -m 'jekyll-project' Push your directory to GitHub. git push --set-upstream origin master Configuring your website to work with GitHub pages \u00b6 Open your Gemfile . Un-comment the following line in your gemfile. # gem \"github-pages\", group: :jekyll_plugins Specify your baseurl in your _config.yml file. baseurl: \"/jekyll-project\" Add your new changes to git . git add . Commit your changes. git commit -m 'jekyll-project jekyll configuration' Push your directory to GitHub. git push Enabling GitHub pages \u00b6 Browse to your website's repository on GitHub. Click Settings . Scroll down to GitHub Pages . Click the dropdown menu set to None in the Source box. Select master . Save your changes. Once saved, you will see a message with the link to your website.","title":"Publishing your Jekyll website with GitHub pages."},{"location":"Static%20site%20generators/Jekyll/Github/#introduction","text":"You will learn how to deploy and host a Jekyll website with GitHub pages in this guide. GitHub pages is a free hosting service offered by GitHub that allows you to publish your website projects for free directly from your GitHub repositories. GitHub pages is powered with the Jekyll engine, hence publishing Jekyll websites with GitHub pages is a much more simplified process compared to other static site generators.","title":"Introduction"},{"location":"Static%20site%20generators/Jekyll/Github/#prerequisites","text":"This guide assumes that you have: A ready to deploy Jekyll website - you can check out our Jekyll quickstart tutorial for details on how to set up a documentation website with Jekyll. git installed locally and GitHub account - visit product.hubspot.com for instructions on how to setup git and GitHub.","title":"Prerequisites"},{"location":"Static%20site%20generators/Jekyll/Github/#deploying-your-project-to-github","text":"Follow these instructions to deploy your Jekyll project to GitHub. Create a GitHub repository for your project - git@github.com:Quadrisheriff/jekyll-project.git. Initialize your project directory with git . git init Add your repository as the remote origin. git remote add origin git@github.com:Quadrisheriff/jekyll-project.git Verify your remote origin. $ git remote -v origin git@github.com:Quadrisheriff/jekyll-project.git (fetch) origin git@github.com:Quadrisheriff/jekyll-project.git (push) Add your new changes to git . git add . Commit your changes. git commit -m 'jekyll-project' Push your directory to GitHub. git push --set-upstream origin master","title":"Deploying your project to GitHub"},{"location":"Static%20site%20generators/Jekyll/Github/#configuring-your-website-to-work-with-github-pages","text":"Open your Gemfile . Un-comment the following line in your gemfile. # gem \"github-pages\", group: :jekyll_plugins Specify your baseurl in your _config.yml file. baseurl: \"/jekyll-project\" Add your new changes to git . git add . Commit your changes. git commit -m 'jekyll-project jekyll configuration' Push your directory to GitHub. git push","title":"Configuring your website to work with GitHub pages"},{"location":"Static%20site%20generators/Jekyll/Github/#enabling-github-pages","text":"Browse to your website's repository on GitHub. Click Settings . Scroll down to GitHub Pages . Click the dropdown menu set to None in the Source box. Select master . Save your changes. Once saved, you will see a message with the link to your website.","title":"Enabling GitHub pages"},{"location":"Static%20site%20generators/Jekyll/Jekyll-quickstart/","text":"Introduction \u00b6 In this guide, I will walk you through the creation of a simple documentation website with Jekyll and the Just The Docs theme. Jekyll is a free, blog aware, ruby-based, open source static site generator. Jekyll can be used to build blogs, documentation websites, portfolio websites, etc. directly from templates, markdown, and html. Prerequisites \u00b6 This guide assumes that you have: Ruby installed locally (version 2.5.0 or above) - visit ruby-lang.org for instructions on how to install Ruby on your local machine. Rubygems installed locally - visit rubygems.org for instructions on how to install Rubygems on your local machine. Bundler installed locally - visit bundler.io for instructions of how to install Bundler on your local machine. Installing Jekyll gem \u00b6 Windows installation Install Jekyll with RubyGem on windows. gem install jekyll Verify your installation. $ jekyll -v jekyll 4 .1.1 MacOS installation Install Jekyll with RubyGem on MacOS. sudo gem install jekyll Verify your installation. $ jekyll -v jekyll 4 .1.1 Linux installation Install Jekyll with RubyGem on Linux. sudo gem install jekyll Verify your installation. $ jekyll -v jekyll 4 .1.1 Creating up your website \u00b6 Use the Jekyll new command to create a new Jekyll project. jekyll new jekyll-project This command will generate a directory named jekyll-project with the following directory structure: jekyll-project/ _posts / welcome-to-jekyll.markdown _config.yml 404.html about.markdown Gemfile Gemfile.lock index.markdown This files are: _posts - Directory for blog contents. _config.yml - Jekyll configuration file. about.markdown - markdown files. index.markdown - markdown files. welcome-to-jekyll.markdown - markdown files. 404.html - 404 HTML file. gemfile and gemfile.lock - Ruby gem files. Configuring your website \u00b6 All of Jekyll's confguration are done using your _config.yml . Add the following YAML keys into your _config.yml file to define your website's information. title: Jekyll Project # The title of your website. email: quadri@sheriff.com # your email address. description: > A new jekyll website # The description of your website. baseurl: \"\" # the subpath of your site, e.g. /blog url: http://quadrisheriff.com # Your website's base URL. twitter_username: quadrisheriff # Your twitter username. github_username: quadrisheriff # Your GitHub username. Visit jekyllrb.com for more information about your configuration options. Setting up the Just the Docs theme \u00b6 The Just The Docs theme is a modern, high customizable, responsive Jekyll theme geared towards building technical documentation websites. The Just The Docs ships with documentation features like the search bar and menu preinstalled, this allows you to focus on writing good documentation. To install and set up the Just The Docs theme: Add the following line to your gemfile . gem \"just-the-docs\" Install the theme and all its required dependecies. bundle install Change your theme name in your _config.yml file. theme: just-the-docs Adding contents to your website \u00b6 Jekyll allows for the usage of two type of content layouts - the page and post layout. Adding Pages to your website \u00b6 Stand alone contents, documentation pages, etc. are created using the page layout To add pages into your website: Add your markdown or html files directly into your website's root folder, you can also group your page files into subfolders, this grouping will determine website's structure. touch new_page.md Add the following YAML front matter into the page to specify the page's information. --- layout: page title: New page permalink: /newpage/ --- Add markdown or HTML content into the page. # New page This is a new website page. Adding posts to your website \u00b6 The post layout is for your blog template. post files are created with the YEAR-MONTH-DAY-title.md naming format, and stored in the _posts folder. To create a new blog post: Navigate to the _posts folder. cd _posts Create your markdown or HTML file in the YEAR-MONTH-DAY-title.md format, where YEAR is any 4 digit number, MONTH is any 2 digit number, DAY is any 2 digit number, and title is your blog post title. . touch 2020 -08-18-new_post.md Add the post file YAML frontmatter. --- layout: post title: \"New Post!\" --- Add markdown or HTML contents into your post file. # New Post. This is a new blog post. Starting the Jekyll web server \u00b6 Jekyll ships with a web server that allows you to preview your changes during development. Start your web server with the bundle exec jekyll serve command. The web server will be hosted at http://localhost:4000 . Note Changes made to the _config.yml file will not reflect automatically in your web server, you have to close and restart the server to preview the changes. Close the web server by pressing CTRL C in your terminal window. Building your website \u00b6 Build your jekyll website with the jekyll build command. This command will generate all your website's static files and store them in a _site directory. You can easily deploy your website on different hosting platforms with the generated static files.","title":"Jekyll Quickstart."},{"location":"Static%20site%20generators/Jekyll/Jekyll-quickstart/#introduction","text":"In this guide, I will walk you through the creation of a simple documentation website with Jekyll and the Just The Docs theme. Jekyll is a free, blog aware, ruby-based, open source static site generator. Jekyll can be used to build blogs, documentation websites, portfolio websites, etc. directly from templates, markdown, and html.","title":"Introduction"},{"location":"Static%20site%20generators/Jekyll/Jekyll-quickstart/#prerequisites","text":"This guide assumes that you have: Ruby installed locally (version 2.5.0 or above) - visit ruby-lang.org for instructions on how to install Ruby on your local machine. Rubygems installed locally - visit rubygems.org for instructions on how to install Rubygems on your local machine. Bundler installed locally - visit bundler.io for instructions of how to install Bundler on your local machine.","title":"Prerequisites"},{"location":"Static%20site%20generators/Jekyll/Jekyll-quickstart/#installing-jekyll-gem","text":"Windows installation Install Jekyll with RubyGem on windows. gem install jekyll Verify your installation. $ jekyll -v jekyll 4 .1.1 MacOS installation Install Jekyll with RubyGem on MacOS. sudo gem install jekyll Verify your installation. $ jekyll -v jekyll 4 .1.1 Linux installation Install Jekyll with RubyGem on Linux. sudo gem install jekyll Verify your installation. $ jekyll -v jekyll 4 .1.1","title":"Installing Jekyll gem"},{"location":"Static%20site%20generators/Jekyll/Jekyll-quickstart/#creating-up-your-website","text":"Use the Jekyll new command to create a new Jekyll project. jekyll new jekyll-project This command will generate a directory named jekyll-project with the following directory structure: jekyll-project/ _posts / welcome-to-jekyll.markdown _config.yml 404.html about.markdown Gemfile Gemfile.lock index.markdown This files are: _posts - Directory for blog contents. _config.yml - Jekyll configuration file. about.markdown - markdown files. index.markdown - markdown files. welcome-to-jekyll.markdown - markdown files. 404.html - 404 HTML file. gemfile and gemfile.lock - Ruby gem files.","title":"Creating up your website"},{"location":"Static%20site%20generators/Jekyll/Jekyll-quickstart/#configuring-your-website","text":"All of Jekyll's confguration are done using your _config.yml . Add the following YAML keys into your _config.yml file to define your website's information. title: Jekyll Project # The title of your website. email: quadri@sheriff.com # your email address. description: > A new jekyll website # The description of your website. baseurl: \"\" # the subpath of your site, e.g. /blog url: http://quadrisheriff.com # Your website's base URL. twitter_username: quadrisheriff # Your twitter username. github_username: quadrisheriff # Your GitHub username. Visit jekyllrb.com for more information about your configuration options.","title":"Configuring your website"},{"location":"Static%20site%20generators/Jekyll/Jekyll-quickstart/#setting-up-the-just-the-docs-theme","text":"The Just The Docs theme is a modern, high customizable, responsive Jekyll theme geared towards building technical documentation websites. The Just The Docs ships with documentation features like the search bar and menu preinstalled, this allows you to focus on writing good documentation. To install and set up the Just The Docs theme: Add the following line to your gemfile . gem \"just-the-docs\" Install the theme and all its required dependecies. bundle install Change your theme name in your _config.yml file. theme: just-the-docs","title":"Setting up the Just the Docs theme"},{"location":"Static%20site%20generators/Jekyll/Jekyll-quickstart/#adding-contents-to-your-website","text":"Jekyll allows for the usage of two type of content layouts - the page and post layout.","title":"Adding contents to your website"},{"location":"Static%20site%20generators/Jekyll/Jekyll-quickstart/#adding-pages-to-your-website","text":"Stand alone contents, documentation pages, etc. are created using the page layout To add pages into your website: Add your markdown or html files directly into your website's root folder, you can also group your page files into subfolders, this grouping will determine website's structure. touch new_page.md Add the following YAML front matter into the page to specify the page's information. --- layout: page title: New page permalink: /newpage/ --- Add markdown or HTML content into the page. # New page This is a new website page.","title":"Adding Pages to your website"},{"location":"Static%20site%20generators/Jekyll/Jekyll-quickstart/#adding-posts-to-your-website","text":"The post layout is for your blog template. post files are created with the YEAR-MONTH-DAY-title.md naming format, and stored in the _posts folder. To create a new blog post: Navigate to the _posts folder. cd _posts Create your markdown or HTML file in the YEAR-MONTH-DAY-title.md format, where YEAR is any 4 digit number, MONTH is any 2 digit number, DAY is any 2 digit number, and title is your blog post title. . touch 2020 -08-18-new_post.md Add the post file YAML frontmatter. --- layout: post title: \"New Post!\" --- Add markdown or HTML contents into your post file. # New Post. This is a new blog post.","title":"Adding posts to your website"},{"location":"Static%20site%20generators/Jekyll/Jekyll-quickstart/#starting-the-jekyll-web-server","text":"Jekyll ships with a web server that allows you to preview your changes during development. Start your web server with the bundle exec jekyll serve command. The web server will be hosted at http://localhost:4000 . Note Changes made to the _config.yml file will not reflect automatically in your web server, you have to close and restart the server to preview the changes. Close the web server by pressing CTRL C in your terminal window.","title":"Starting the Jekyll web server"},{"location":"Static%20site%20generators/Jekyll/Jekyll-quickstart/#building-your-website","text":"Build your jekyll website with the jekyll build command. This command will generate all your website's static files and store them in a _site directory. You can easily deploy your website on different hosting platforms with the generated static files.","title":"Building your website"},{"location":"Static%20site%20generators/Jekyll/netlify/","text":"This tutorial explains how to deploy and manage your Jekyll websites with Netlify. Netlify is a cloud computing platform that allows you to publish all your web projects for free. To deploy your Jekyll website on Netlify, first you have to deploy your website's directory into a git repository manager(GitHub, GitLab,or Bitbucket), then coonect the repository to Netlify from the git repository manager. Prerequisites \u00b6 This guide assumes that you have: A ready to deploy Jekyll website - you can check out our Jekyll quickstart tutorial for details on how to set up a documentation website with Jekyll . Git installed locally and GitHub account - visit product.hubspot.com for instructions on how to setup Git and GitHub. Netlify account - visit nelify.com to set up your free Netlfiy account. Deploying your project to GitHub \u00b6 To deploy your website on GitHub: Create a new GitHub repository for your project - git@github.com:Quadrisheriff/jekyll-project.git. Initialize your project directory with git . git init Add your repository as the remote origin. git remote add origin git@github.com:Quadrisheriff/jekyll-project.git Verify your remote origin. $ git remote -v origin git@github.com:Quadrisheriff/jekyll-project.git (fetch) origin git@github.com:Quadrisheriff/jekyll-project.git (push) Add your new changes to git . git add . Commit your changes. git commit -m 'jekyll-project' Push your directory to GitHub. git push --set-upstream origin master Deploying your website on Netlify from GitHub \u00b6 To deploy your website to Netlify from your GitHub repository: From your Netlify dashboard, select New site from Git . Click GitHub . Walk through the processes involved in linking your GitHub account with Netlify. Select your website's repository from all the listed repositories. Click Deploy site to deploy your webste on Netlify Once deployed, a preview link will be generated and displayed on your Netlify dashboard.","title":"Deploying your Jekyll website on Netlify."},{"location":"Static%20site%20generators/Jekyll/netlify/#prerequisites","text":"This guide assumes that you have: A ready to deploy Jekyll website - you can check out our Jekyll quickstart tutorial for details on how to set up a documentation website with Jekyll . Git installed locally and GitHub account - visit product.hubspot.com for instructions on how to setup Git and GitHub. Netlify account - visit nelify.com to set up your free Netlfiy account.","title":"Prerequisites"},{"location":"Static%20site%20generators/Jekyll/netlify/#deploying-your-project-to-github","text":"To deploy your website on GitHub: Create a new GitHub repository for your project - git@github.com:Quadrisheriff/jekyll-project.git. Initialize your project directory with git . git init Add your repository as the remote origin. git remote add origin git@github.com:Quadrisheriff/jekyll-project.git Verify your remote origin. $ git remote -v origin git@github.com:Quadrisheriff/jekyll-project.git (fetch) origin git@github.com:Quadrisheriff/jekyll-project.git (push) Add your new changes to git . git add . Commit your changes. git commit -m 'jekyll-project' Push your directory to GitHub. git push --set-upstream origin master","title":"Deploying your project to GitHub"},{"location":"Static%20site%20generators/Jekyll/netlify/#deploying-your-website-on-netlify-from-github","text":"To deploy your website to Netlify from your GitHub repository: From your Netlify dashboard, select New site from Git . Click GitHub . Walk through the processes involved in linking your GitHub account with Netlify. Select your website's repository from all the listed repositories. Click Deploy site to deploy your webste on Netlify Once deployed, a preview link will be generated and displayed on your Netlify dashboard.","title":"Deploying your website on Netlify from GitHub"},{"location":"Static%20site%20generators/MkDocs/Getting-started/","text":"Introduction \u00b6 MkDocs is an open-source static site generator geared to creating technical documentation websites. In this guide, you will learn how to build a documentation website with MkDocs. Prerequisites \u00b6 This guide assumes that you have: Python installed locally - visit realpython.com for instructions on how to install python on your local machine. pip installed locally - visit realpyhton.com for instructions on how to install pip on your local machine. Installing MkDocs with pip \u00b6 MkDocs can be installed with pip using the pip install command. pip install mkdocs After Installing MkDocs, verify your installation with the mkdocs --version command. $ mkdocs --version mkdocs, version 1 .1 Creating your website \u00b6 Create a MkDocs website with the mkdocs new command. $ mkdocs new mkdocs-project INFO - Creating project directory: mkdocs-project INFO - Writing config file: mkdocs-project/mkdocs.yml INFO - Writing initial docs: mkdocs-project/docs/index.md This command will generate a new directory with the following file structure: mkdocs-project/ docs/ index.md mkdocs.yml The following files are: docs : Main docs folder. docs/index.md : Home page markdown file. mkdocs.yml : Mkdocs configuration file. Configuring your website \u00b6 All of MkDocs configurations are done using your mkdocs.yml file. Add the following into your mkdocs.yml file to specify your website's information. ## Add your website's information site_name: Mkdocs Project site_description: A new mkdocs project site_author: Quadri Sheriff Visit MkDocs website for more configuration options. Adding pages into your website \u00b6 To add pages to your website, First create the markdown file in your docs folder. # /docs touch new_page.md Then, add the following YAML front matter into your page to configure the page's information. --- title: Second Page. ## page name summary: Mkdocs project second page. ## page summary authors: - Quadri Sheriff ## page author --- Add markdown contents into the page. # Second Page This is the second page of our new mkdocs for material theme tutorial. You can also add the new page into the website navigation bar by configuring your mkdocs.yml file. # mkdocs.yml site_name: Mkdocs Project site_description: A new mkdocs project site_author: Quadri Sheriff nav: # Edit the Navbar - Home: index.md - New page: new_page.md Starting the MkDocs development server \u00b6 Mkdocs ships with a development server that allows you to preview your documentation during production. Use the mkdocs serve command to start the dev-server. $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0 .30 seconds [ I 200729 15 :08:04 server:296 ] Serving on http://127.0.0.1:8000 INFO - Serving on http://127.0.0.1:8000 [ I 200729 15 :08:04 handlers:62 ] Start watching changes INFO - Start watching changes [ I 200729 15 :08:04 handlers:64 ] Start detecting changes INFO - Start detecting changes The development server will be deployed at http://localhost:8000 . Info MkDocs development server supports live changes and will automatically reload to preview any changes made in your documentation files. You can close the development server by pressing CTRL C in your terminal window. Building your website \u00b6 Use the mkdocs build command to generate all your website's static files. $ mkdocs build INFO - Cleaning site directory INFO - Building documentation to directory: /Users/sheriff/new-mkdocs-project/site INFO - Documentation built in 0.32 seconds This command will create a site folder where all the generated static files are stored. You can deploy your website on publishing platforms like AWS or GitHub pages using this static files.","title":"MkDocs Quickstart"},{"location":"Static%20site%20generators/MkDocs/Getting-started/#introduction","text":"MkDocs is an open-source static site generator geared to creating technical documentation websites. In this guide, you will learn how to build a documentation website with MkDocs.","title":"Introduction"},{"location":"Static%20site%20generators/MkDocs/Getting-started/#prerequisites","text":"This guide assumes that you have: Python installed locally - visit realpython.com for instructions on how to install python on your local machine. pip installed locally - visit realpyhton.com for instructions on how to install pip on your local machine.","title":"Prerequisites"},{"location":"Static%20site%20generators/MkDocs/Getting-started/#installing-mkdocs-with-pip","text":"MkDocs can be installed with pip using the pip install command. pip install mkdocs After Installing MkDocs, verify your installation with the mkdocs --version command. $ mkdocs --version mkdocs, version 1 .1","title":"Installing MkDocs with pip"},{"location":"Static%20site%20generators/MkDocs/Getting-started/#creating-your-website","text":"Create a MkDocs website with the mkdocs new command. $ mkdocs new mkdocs-project INFO - Creating project directory: mkdocs-project INFO - Writing config file: mkdocs-project/mkdocs.yml INFO - Writing initial docs: mkdocs-project/docs/index.md This command will generate a new directory with the following file structure: mkdocs-project/ docs/ index.md mkdocs.yml The following files are: docs : Main docs folder. docs/index.md : Home page markdown file. mkdocs.yml : Mkdocs configuration file.","title":"Creating your website"},{"location":"Static%20site%20generators/MkDocs/Getting-started/#configuring-your-website","text":"All of MkDocs configurations are done using your mkdocs.yml file. Add the following into your mkdocs.yml file to specify your website's information. ## Add your website's information site_name: Mkdocs Project site_description: A new mkdocs project site_author: Quadri Sheriff Visit MkDocs website for more configuration options.","title":"Configuring your website"},{"location":"Static%20site%20generators/MkDocs/Getting-started/#adding-pages-into-your-website","text":"To add pages to your website, First create the markdown file in your docs folder. # /docs touch new_page.md Then, add the following YAML front matter into your page to configure the page's information. --- title: Second Page. ## page name summary: Mkdocs project second page. ## page summary authors: - Quadri Sheriff ## page author --- Add markdown contents into the page. # Second Page This is the second page of our new mkdocs for material theme tutorial. You can also add the new page into the website navigation bar by configuring your mkdocs.yml file. # mkdocs.yml site_name: Mkdocs Project site_description: A new mkdocs project site_author: Quadri Sheriff nav: # Edit the Navbar - Home: index.md - New page: new_page.md","title":"Adding pages into your website"},{"location":"Static%20site%20generators/MkDocs/Getting-started/#starting-the-mkdocs-development-server","text":"Mkdocs ships with a development server that allows you to preview your documentation during production. Use the mkdocs serve command to start the dev-server. $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0 .30 seconds [ I 200729 15 :08:04 server:296 ] Serving on http://127.0.0.1:8000 INFO - Serving on http://127.0.0.1:8000 [ I 200729 15 :08:04 handlers:62 ] Start watching changes INFO - Start watching changes [ I 200729 15 :08:04 handlers:64 ] Start detecting changes INFO - Start detecting changes The development server will be deployed at http://localhost:8000 . Info MkDocs development server supports live changes and will automatically reload to preview any changes made in your documentation files. You can close the development server by pressing CTRL C in your terminal window.","title":"Starting the MkDocs development server"},{"location":"Static%20site%20generators/MkDocs/Getting-started/#building-your-website","text":"Use the mkdocs build command to generate all your website's static files. $ mkdocs build INFO - Cleaning site directory INFO - Building documentation to directory: /Users/sheriff/new-mkdocs-project/site INFO - Documentation built in 0.32 seconds This command will create a site folder where all the generated static files are stored. You can deploy your website on publishing platforms like AWS or GitHub pages using this static files.","title":"Building your website"},{"location":"Static%20site%20generators/MkDocs/Github/","text":"Introduction \u00b6 In this guide, you will deploy your MkDocs website to GitHub and publish the website with GitHub pages. GitHub pages is a free hosting service offered by GitHub that allows you to publish your webistes for free directly from your GitHub repositories. GitHub pages is available in all public GitHub repositories and GitHub free for organizations. Prerequisites \u00b6 This guide assumes that you have: A ready to deploy MkDocs website - You can follow our MkDocs tutorial for instructions on how to create a documentation website with MkDocs. git installed locally and GitHub account - visit product.hubspot.com for instructions on how to setup git and GitHub. Deploying your project to GitHub \u00b6 To deploy your website on to GitHub: Create a new github repository for your project - git@github.com:Quadrisheriff/mkdocs-project.git. Initialize your project directory with git and add a remote origin. git init Add your repository as the remote origin. git remote add origin git@github.com:Quadrisheriff/mkdocs-project.git Verify your remote origin. $ git remote -v origin git@github.com:Quadrisheriff/mkdocs-project.git (fetch) origin git@github.com:Quadrisheriff/mkdocs-project.git (push) Add your new changes to git . git add . Commit your changes. git commit -m 'mkdocs-project' Push your directory to GitHub. git push --set-upstream origin master Publishing your website with GitHub pages \u00b6 Use the mkdocs gh-deploy command to deploy MkDocs websites directly from your terminal with GitHub pages. The link to your website will be printed out into your terminal window.","title":"Publishing your MkDocs website with GitHub pages."},{"location":"Static%20site%20generators/MkDocs/Github/#introduction","text":"In this guide, you will deploy your MkDocs website to GitHub and publish the website with GitHub pages. GitHub pages is a free hosting service offered by GitHub that allows you to publish your webistes for free directly from your GitHub repositories. GitHub pages is available in all public GitHub repositories and GitHub free for organizations.","title":"Introduction"},{"location":"Static%20site%20generators/MkDocs/Github/#prerequisites","text":"This guide assumes that you have: A ready to deploy MkDocs website - You can follow our MkDocs tutorial for instructions on how to create a documentation website with MkDocs. git installed locally and GitHub account - visit product.hubspot.com for instructions on how to setup git and GitHub.","title":"Prerequisites"},{"location":"Static%20site%20generators/MkDocs/Github/#deploying-your-project-to-github","text":"To deploy your website on to GitHub: Create a new github repository for your project - git@github.com:Quadrisheriff/mkdocs-project.git. Initialize your project directory with git and add a remote origin. git init Add your repository as the remote origin. git remote add origin git@github.com:Quadrisheriff/mkdocs-project.git Verify your remote origin. $ git remote -v origin git@github.com:Quadrisheriff/mkdocs-project.git (fetch) origin git@github.com:Quadrisheriff/mkdocs-project.git (push) Add your new changes to git . git add . Commit your changes. git commit -m 'mkdocs-project' Push your directory to GitHub. git push --set-upstream origin master","title":"Deploying your project to GitHub"},{"location":"Static%20site%20generators/MkDocs/Github/#publishing-your-website-with-github-pages","text":"Use the mkdocs gh-deploy command to deploy MkDocs websites directly from your terminal with GitHub pages. The link to your website will be printed out into your terminal window.","title":"Publishing your website with GitHub pages"},{"location":"Static%20site%20generators/MkDocs/Material-theme/","text":"Introduction \u00b6 In this guide, I will walk you through the creation of a simple documentation website with the Material for MkDocs theme . The Material for MkDocs theme is an easily customizable, mobile responsive, well-tested and well-optimized MkDocs theme that is built using the Google material design guidelines. Prerequisites \u00b6 This guide assumes that you have python and pip installed on your local machine. Installing the Material for MkDocs theme with pip \u00b6 Install the Material for MkDocs theme with pip . pip install mkdocs-material Note MkDocs, Markdown, Pygments, and Python Markdown markdown extensions will be installed automatically as local dependecies when you install the Material for MkDocs theme. Creating your website \u00b6 Create a MkDocs website with the mkdocs new command. $ mkdocs new mkdocs-project INFO - Creating project directory: mkdocs-project INFO - Writing config file: mkdocs-project/mkdocs.yml INFO - Writing initial docs: mkdocs-project/docs/index.md This command will generate a new directory with the following file structure: mkdocs-project/ docs/ index.md mkdocs.yml The following files are: docs : Main docs folder. docs/index.md : Home page markdown file. mkdocs.yml : Mkdocs configuration file. Configuring the Material for MkDocs theme \u00b6 Add the following into your mkdocs.yml file to specify your project\u2019s information, and also to configure the Material for MkDocs theme. # mkdocs.yml site_name: Mkdocs Project site_description: A new mkdocs project site_author: Quadri Sheriff themes: # Configure the material for mkdocs theme name: material palette: # edit your website's color palette primary: 'purple' Visit the MkDocs-material website for more configuration options. Adding pages into your website \u00b6 To add pages to your website, First create the markdown file in your docs folder. # /docs touch new_page.md Then, add the following YAML front matter into your page to configure the page's information. --- title: Second Page. ## page name summary: Mkdocs project second page. ## page summary authors: - Quadri Sheriff ## page author --- Add markdown contents into the page. # Second Page This is the second page of our new mkdocs for material theme tutorial. You can also add the new page into the website navigation bar by configuring your mkdocs.yml file. # mkdocs.yml site_name: Mkdocs Project site_description: A new mkdocs project site_author: Quadri Sheriff themes: name: material palette: ## edit the website's color palette primary: 'purple' nav: # Edit the Navbar - Home: index.md - New page: new_page.md Starting the MkDocs development server \u00b6 Mkdocs ships with a development server(dev-server) that allows you to preview your documentation during production. Use the mkdocs serve command to start the dev-server. This dev-server will be deployed at http://localhost:8000 . The dev-server supports live changes and will reload automatically to preview any edit made in your documentation files. You can close the dev-server by pressing CTRL+C into your terminal window. Building your website \u00b6 Use the mkdocs build command to generate all your website's static files. $ mkdocs build INFO - Cleaning site directory INFO - Building documentation to directory: /Users/sheriff/new-mkdocs-project/site INFO - Documentation built in 0.32 seconds This command will create a site folder where all the static files will be stored. You can deploy your website on publishing platforms like AWS or GitHub pages using this static files.","title":"Material for MkDocs Theme Quickstart."},{"location":"Static%20site%20generators/MkDocs/Material-theme/#introduction","text":"In this guide, I will walk you through the creation of a simple documentation website with the Material for MkDocs theme . The Material for MkDocs theme is an easily customizable, mobile responsive, well-tested and well-optimized MkDocs theme that is built using the Google material design guidelines.","title":"Introduction"},{"location":"Static%20site%20generators/MkDocs/Material-theme/#prerequisites","text":"This guide assumes that you have python and pip installed on your local machine.","title":"Prerequisites"},{"location":"Static%20site%20generators/MkDocs/Material-theme/#installing-the-material-for-mkdocs-theme-with-pip","text":"Install the Material for MkDocs theme with pip . pip install mkdocs-material Note MkDocs, Markdown, Pygments, and Python Markdown markdown extensions will be installed automatically as local dependecies when you install the Material for MkDocs theme.","title":"Installing the Material for MkDocs theme with pip"},{"location":"Static%20site%20generators/MkDocs/Material-theme/#creating-your-website","text":"Create a MkDocs website with the mkdocs new command. $ mkdocs new mkdocs-project INFO - Creating project directory: mkdocs-project INFO - Writing config file: mkdocs-project/mkdocs.yml INFO - Writing initial docs: mkdocs-project/docs/index.md This command will generate a new directory with the following file structure: mkdocs-project/ docs/ index.md mkdocs.yml The following files are: docs : Main docs folder. docs/index.md : Home page markdown file. mkdocs.yml : Mkdocs configuration file.","title":"Creating your website"},{"location":"Static%20site%20generators/MkDocs/Material-theme/#configuring-the-material-for-mkdocs-theme","text":"Add the following into your mkdocs.yml file to specify your project\u2019s information, and also to configure the Material for MkDocs theme. # mkdocs.yml site_name: Mkdocs Project site_description: A new mkdocs project site_author: Quadri Sheriff themes: # Configure the material for mkdocs theme name: material palette: # edit your website's color palette primary: 'purple' Visit the MkDocs-material website for more configuration options.","title":"Configuring the Material for MkDocs theme"},{"location":"Static%20site%20generators/MkDocs/Material-theme/#adding-pages-into-your-website","text":"To add pages to your website, First create the markdown file in your docs folder. # /docs touch new_page.md Then, add the following YAML front matter into your page to configure the page's information. --- title: Second Page. ## page name summary: Mkdocs project second page. ## page summary authors: - Quadri Sheriff ## page author --- Add markdown contents into the page. # Second Page This is the second page of our new mkdocs for material theme tutorial. You can also add the new page into the website navigation bar by configuring your mkdocs.yml file. # mkdocs.yml site_name: Mkdocs Project site_description: A new mkdocs project site_author: Quadri Sheriff themes: name: material palette: ## edit the website's color palette primary: 'purple' nav: # Edit the Navbar - Home: index.md - New page: new_page.md","title":"Adding pages into your website"},{"location":"Static%20site%20generators/MkDocs/Material-theme/#starting-the-mkdocs-development-server","text":"Mkdocs ships with a development server(dev-server) that allows you to preview your documentation during production. Use the mkdocs serve command to start the dev-server. This dev-server will be deployed at http://localhost:8000 . The dev-server supports live changes and will reload automatically to preview any edit made in your documentation files. You can close the dev-server by pressing CTRL+C into your terminal window.","title":"Starting the MkDocs development server"},{"location":"Static%20site%20generators/MkDocs/Material-theme/#building-your-website","text":"Use the mkdocs build command to generate all your website's static files. $ mkdocs build INFO - Cleaning site directory INFO - Building documentation to directory: /Users/sheriff/new-mkdocs-project/site INFO - Documentation built in 0.32 seconds This command will create a site folder where all the static files will be stored. You can deploy your website on publishing platforms like AWS or GitHub pages using this static files.","title":"Building your website"},{"location":"Static%20site%20generators/MkDocs/netlify/","text":"Introduction \u00b6 This tutorial explains how to deploy and manage your MkDocs websites with Netlify. Netlify is a cloud computing platform that allows you to deploy all your web projects for free. Netlify offers some cool features like CDN, continous integration, admin GUI that enables you to better manage your web projects. This guide include steps about adding Netlify configuration files into your project, deploying your website's repository to GitHub and finally deploying your website on to Nelitfy directly from GitHub. Prerequisites \u00b6 This guide assumes that you have: A Ready to deploy MkDocs website - You can follow our MkDocs tutorial for details on how to create a documentation website with MkDocs. Git installed locally and GitHub account - visit product.hubspot.com for instructions on how to setup Git and GitHub. Netlify account - visit nelify.com to set up your free Netlfiy account. Adding Netlify configuration files into your project \u00b6 Add a requirements.txt , runtime.txt and netlify.toml file into root folder of your website. touch requirements.txt runtime.txt netlify.toml Specify your MkDocs version in the requirements.txt file. # requirements.txt mkdocs >=1.1 Specify your python version in the runtime.txt file. # runtime.txt 3.8 Add your build settings into the netlify.toml file. # netlify.toml [build] command = \"mkdocs build\" publish = \"site\" Deploying your project to GitHub \u00b6 To deploy your website on to GitHub: Create a new github repository for your project - git@github.com:Quadrisheriff/mkdocs-project.git. Initialize your project directory with git and add a remote origin. git init Add your repository as the remote origin. git remote add origin git@github.com:Quadrisheriff/mkdocs-project.git Verify your remote origin. $ git remote -v origin git@github.com:Quadrisheriff/mkdocs-project.git (fetch) origin git@github.com:Quadrisheriff/mkdocs-project.git (push) Add your new changes to git . git add . Commit your changes. git commit -m 'mkdocs-project' Push your directory to GitHub. git push --set-upstream origin master Deploying your website on Netlify from GitHub \u00b6 To deploy your website to Netlify from your GitHub repository: From your Netlify dashboard, select New site from Git . Click GitHub . Walk through the processes involved in linking your GitHub account with Netlify. Select your website's repository from all the listed repositories. Click Deploy site to deploy your webste on netlify Once deployed, your website's details including a preview link will be added to your Netlify dashboard.","title":"Deploying your MkDocs website on Netlify."},{"location":"Static%20site%20generators/MkDocs/netlify/#introduction","text":"This tutorial explains how to deploy and manage your MkDocs websites with Netlify. Netlify is a cloud computing platform that allows you to deploy all your web projects for free. Netlify offers some cool features like CDN, continous integration, admin GUI that enables you to better manage your web projects. This guide include steps about adding Netlify configuration files into your project, deploying your website's repository to GitHub and finally deploying your website on to Nelitfy directly from GitHub.","title":"Introduction"},{"location":"Static%20site%20generators/MkDocs/netlify/#prerequisites","text":"This guide assumes that you have: A Ready to deploy MkDocs website - You can follow our MkDocs tutorial for details on how to create a documentation website with MkDocs. Git installed locally and GitHub account - visit product.hubspot.com for instructions on how to setup Git and GitHub. Netlify account - visit nelify.com to set up your free Netlfiy account.","title":"Prerequisites"},{"location":"Static%20site%20generators/MkDocs/netlify/#adding-netlify-configuration-files-into-your-project","text":"Add a requirements.txt , runtime.txt and netlify.toml file into root folder of your website. touch requirements.txt runtime.txt netlify.toml Specify your MkDocs version in the requirements.txt file. # requirements.txt mkdocs >=1.1 Specify your python version in the runtime.txt file. # runtime.txt 3.8 Add your build settings into the netlify.toml file. # netlify.toml [build] command = \"mkdocs build\" publish = \"site\"","title":"Adding Netlify configuration files into your project"},{"location":"Static%20site%20generators/MkDocs/netlify/#deploying-your-project-to-github","text":"To deploy your website on to GitHub: Create a new github repository for your project - git@github.com:Quadrisheriff/mkdocs-project.git. Initialize your project directory with git and add a remote origin. git init Add your repository as the remote origin. git remote add origin git@github.com:Quadrisheriff/mkdocs-project.git Verify your remote origin. $ git remote -v origin git@github.com:Quadrisheriff/mkdocs-project.git (fetch) origin git@github.com:Quadrisheriff/mkdocs-project.git (push) Add your new changes to git . git add . Commit your changes. git commit -m 'mkdocs-project' Push your directory to GitHub. git push --set-upstream origin master","title":"Deploying your project to GitHub"},{"location":"Static%20site%20generators/MkDocs/netlify/#deploying-your-website-on-netlify-from-github","text":"To deploy your website to Netlify from your GitHub repository: From your Netlify dashboard, select New site from Git . Click GitHub . Walk through the processes involved in linking your GitHub account with Netlify. Select your website's repository from all the listed repositories. Click Deploy site to deploy your webste on netlify Once deployed, your website's details including a preview link will be added to your Netlify dashboard.","title":"Deploying your website on Netlify from GitHub"}]}